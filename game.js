/*
 * ==============================================
 * VIRTUAL RESOLUTION SYSTEM
 * ==============================================
 * 
 * H·ªá th·ªëng n√†y ƒë·∫£m b·∫£o game hi·ªÉn th·ªã ƒë·ªìng nh·∫•t tr√™n m·ªçi thi·∫øt b·ªã v·ªõi ƒë·ªô ph√¢n gi·∫£i kh√°c nhau.
 * 
 * C√°ch ho·∫°t ƒë·ªông:
 * 1. ƒê·ªãnh nghƒ©a Virtual Resolution c·ªë ƒë·ªãnh (1280√ó720)
 * 2. T√≠nh scale = min(viewportWidth/virtualWidth, viewportHeight/virtualHeight)
 * 3. Canvas buffer = viewport √ó DPR (ƒë·ªÉ render s·∫Øc n√©t tr√™n m√†n h√¨nh Retina)
 * 4. Canvas CSS = viewport (ph·ªß full m√†n h√¨nh)
 * 5. Context scale = scale √ó DPR
 * 6. T·∫•t c·∫£ game objects s·ª≠ d·ª•ng virtual coordinates
 * 7. Context t·ª± ƒë·ªông convert virtual ‚Üí screen khi v·∫Ω
 * 
 * L·ª£i √≠ch~
 * - Game logic lu√¥n d√πng t·ªça ƒë·ªô c·ªë ƒë·ªãnh (1280√ó720) - d·ªÖ code
 * - T·ª± ƒë·ªông scale ph√π h·ª£p v·ªõi m·ªçi m√†n h√¨nh
 * - T·∫≠n d·ª•ng DPR ƒë·ªÉ render s·∫Øc n√©t (test v·ªõi DPR=3)
 * - Maintain aspect ratio (kh√¥ng b·ªã m√©o)
 */

// ============================================
// GAME CONFIGURATION - T·∫§T C·∫¢ C·∫§U H√åNH ·ªû ƒê√ÇY
// ============================================

// ‚öôÔ∏è GAME_CONFIG - Dev Configuration (Technical Settings)
// KH√îNG ƒê∆Ø·ª¢C S·ª¨A B·ª™A - ·∫¢nh h∆∞·ªüng ƒë·∫øn game mechanics
var GAME_CONFIG = {
    // Virtual Resolution - ƒê·ªô ph√¢n gi·∫£i ·∫£o c·ªë ƒë·ªãnh
    VIRTUAL_WIDTH: 1280,     // Chi·ªÅu r·ªông ·∫£o chu·∫©n
    VIRTUAL_HEIGHT: 720,     // Chi·ªÅu cao ·∫£o chu·∫©n (16:9 ratio)
    
    // Debug
    SHOW_HITBOX: false,       // B·∫≠t/t·∫Øt hi·ªÉn th·ªã v√≤ng tr√≤n hitbox (true = hi·ªán, false = ·∫©n)

    // K√≠ch th∆∞·ªõc m√°y bay
    PLANE_SIZE: 50,          // K√≠ch th∆∞·ªõc c∆° b·∫£n c·ªßa m√°y bay (px)
    PLANE_SIZE_MULTIPLIER: 2, // H·ªá s·ªë nh√¢n khi v·∫Ω ·∫£nh (1.5 = g·∫•p 1.5 l·∫ßn)

    // T·ªëc ƒë·ªô bay c·ªßa m√°y bay
    SPEED_DEFAULT: 1,        // T·ªëc ƒë·ªô m·∫∑c ƒë·ªãnh
    SPEED_RANGE: 2,          // Kho·∫£ng random t·ªëc ƒë·ªô th∆∞·ªùng

    // M√°y bay si√™u nhanh (Fast Planes)
    FAST_PLANE_CHANCE: 0.2,  // 20% c∆° h·ªôi xu·∫•t hi·ªán m√°y bay si√™u nhanh
    SPEED_FAST: 4,          // T·ªëc ƒë·ªô c·ªßa m√°y bay si√™u nhanh
    SPEED_FAST_RANGE: 2,     // Kho·∫£ng random cho m√°y bay si√™u nhanh (10-13)

    // Hit detection - V√πng click
    HITBOX_MULTIPLIER: 1.8,  // TƒÉng v√πng click l√™n 1.5 l·∫ßn ƒë·ªÉ d·ªÖ b·∫•m h∆°n

    // Spawn timing
    SPAWN_DELAY_MIN: 400,       // Delay t·ªëi thi·ªÉu gi·ªØa c√°c l·∫ßn spawn (ms)
    SPAWN_DELAY_RANGE: 400,     // Kho·∫£ng random delay (ms) - spawn m·ªói 0.5-1 gi√¢y

    // T·ª∑ l·ªá spawn c√°c lo·∫°i m√°y bay
    SPAWN_RATE: {
        PLAYER: 0.5,      // 50% l√† m√°y bay VietJet
        HORIZONTAL: 0.25, // 25% bay ngang
        VERTICAL: 0.25    // 25% bay d·ªçc
    }
};

// üéÆ CAMPAIGN_SETTINGS - Campaign Configuration (Business Settings)
// ADMIN C√ì TH·ªÇ THAY ƒê·ªîI - Theo t·ª´ng campaign/event
var CAMPAIGN_SETTINGS = {
    // Gameplay Settings
    gameTime: 20,               // Th·ªùi gian ch∆°i (gi√¢y)
    timeBonus: 2,               // Th·ªùi gian th∆∞·ªüng khi b·∫Øt ƒë√∫ng m√°y bay (gi√¢y)
    speedMultiplier: 1.5,       // ƒê·ªô kh√≥: 1 = D·ªÖ, 1.5 = Trung b√¨nh, 2 = Kh√≥
    maxLives: 3,                // S·ªë m·∫°ng/c∆° h·ªôi
    requiredPlanes: 6,          // S·ªë m√°y bay VietJet c·∫ßn b·∫Øt ƒë·ªÉ th·∫Øng
    totalVietjetPlanes: 10,     // T·ªïng s·ªë m√°y bay VietJet s·∫Ω xu·∫•t hi·ªán
    
    // Business Settings
    qrCode: 'assets/qr_code_level_2.png',
    voucherLink: 'https://evoucher.vietjetair.com/Vouchers/Details?AwardCampaign=454',
    campaignId: 'vietjet-holiday-2024',
    campaignName: 'VietJet Holiday Campaign'
};

// C·∫•u h√¨nh timing cho Gacha Animation
var GACHA_CONFIG = {
    // Th·ªùi gian quay nhanh (spinning) tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu d·ª´ng
    SPIN_DURATION: 5000,        
    
    // Th·ªùi gian chuy·ªÉn ƒë·ªông ch·∫≠m l·∫°i (easing) khi d·ª´ng
    STOP_TRANSITION_DURATION: 1000,  // 1000ms = 1 gi√¢y ƒë·ªÉ d·ª´ng m∆∞·ª£t
    
    // Th·ªùi gian ph√°t √¢m thanh k·∫øt qu·∫£ (sau khi b·∫Øt ƒë·∫ßu d·ª´ng)
    SOUND_DELAY: 800,           // 800ms
    
    // Th·ªùi gian hi·ªÉn th·ªã t√™n map (sau khi d·ª´ng ho√†n to√†n)
    RESULT_DISPLAY_DELAY: 1000, // 1000ms = 1 gi√¢y
    
    // Th·ªùi gian ch·ªù tr∆∞·ªõc khi chuy·ªÉn sang game (sau khi hi·ªán t√™n map)
    GO_TO_GAME_DELAY: 2000,     // 2000ms = 2 gi√¢y
};

// C·∫•u h√¨nh danh s√°ch maps
var MAPS_CONFIG = [
    { id: 1, image: 'assets/map/map_1.jpg', name: 'Map 1' },
    { id: 2, image: 'assets/map/map_2.jpg', name: 'Map 2' },
    { id: 3, image: 'assets/map/map_3.jpg', name: 'Map 3' },
    { id: 4, image: 'assets/map/map_4.jpg', name: 'Map 4' },
    { id: 5, image: 'assets/map/map_5.jpg', name: 'Map 5' },
    { id: 6, image: 'assets/map/map_6.jpg', name: 'Map 6' },
    { id: 7, image: 'assets/map/map_7.jpg', name: 'Map 7' },
    { id: 8, image: 'assets/map/map_8.jpg', name: 'Map 8' },
    { id: 9, image: 'assets/map/map_9.jpg', name: 'Map 9' }
];

// H·ªá th·ªëng √¢m thanh
var sounds = {
    menuTheme: new Audio('assets/sounds/menu_theme.mp3'),
    bgMusic: new Audio('assets/sounds/bg_song.mp3'),
    touchRight: new Audio('assets/sounds/touch_right.mp3'),
    bruh: new Audio('assets/sounds/bruh.mp3'),
    gameOver: new Audio('assets/sounds/sfx_game_over.mp3'),
    winner: new Audio('assets/sounds/sfx_winner.mp3'),
    cutIn: new Audio('assets/sounds/cut_in.mp3'),
    timerBeep: new Audio('assets/sounds/timer_beep.mp3'),
    rating: new Audio('assets/sounds/rating.mp3'),
    tap: new Audio('assets/sounds/tap_1.mp3'),
    wheel: new Audio('assets/sounds/wheel.mp3')  // √Çm thanh gacha wheel
};

// C·∫•u h√¨nh √¢m thanh
sounds.menuTheme.loop = true; // Nh·∫°c menu l·∫∑p l·∫°i
sounds.menuTheme.volume = 1;

sounds.bgMusic.loop = true; // Nh·∫°c n·ªÅn l·∫∑p l·∫°i
sounds.bgMusic.volume = 0.5; // Gi·∫£m √¢m l∆∞·ª£ng nh·∫°c n·ªÅn

sounds.touchRight.volume = 0.5;
sounds.bruh.volume = 0.5;
sounds.gameOver.volume = 0.5;
sounds.winner.volume = 0.5;
sounds.cutIn.volume = 0.7;
sounds.timerBeep.volume = 0.6;
sounds.rating.volume = 0.5;
sounds.tap.volume = 0.6;
sounds.wheel.volume = 1;  // √Çm l∆∞·ª£ng wheel gacha

// Preload audio cho Android WebView
sounds.menuTheme.preload = 'auto';
sounds.bgMusic.preload = 'auto';
sounds.touchRight.preload = 'auto';
sounds.bruh.preload = 'auto';
sounds.gameOver.preload = 'auto';
sounds.winner.preload = 'auto';
sounds.cutIn.preload = 'auto';
sounds.timerBeep.preload = 'auto';
sounds.rating.preload = 'auto';
sounds.tap.preload = 'auto';
sounds.wheel.preload = 'auto';

// Tr·∫°ng th√°i √¢m thanh/nh·∫°c (t√°ch ri√™ng)
var audioSettings = {
    isSfxMuted: false,
    isMusicMuted: false
};

// Load tr·∫°ng th√°i t·ª´ localStorage n·∫øu c√≥
try {
    var savedSfx = localStorage.getItem('vj_sfx_muted');
    var savedMusic = localStorage.getItem('vj_music_muted');
    if (savedSfx !== null) audioSettings.isSfxMuted = savedSfx === '1';
    if (savedMusic !== null) audioSettings.isMusicMuted = savedMusic === '1';
} catch (e) {
    // Storage not available
}

// Helper function ƒë·ªÉ play audio an to√†n (tr√°nh l·ªói tr√™n Android)
function playSoundSafe(sound) {
    try {
        // T√¥n tr·ªçng c√†i ƒë·∫∑t mute
        var isMusic = (sound === sounds.menuTheme || sound === sounds.bgMusic);
        if ((isMusic && audioSettings.isMusicMuted) || (!isMusic && audioSettings.isSfxMuted)) {
            return;
        }

        if (sound.readyState >= 2) { // HAVE_CURRENT_DATA
            sound.currentTime = 0;
            sound.play().catch(function(e) {
                // Audio play blocked
            });
        }
    } catch (e) {
        // Audio error
    }
}

// C·∫≠p nh·∫≠t UI icon cho c√°c n√∫t √¢m thanh/nh·∫°c theo tr·∫°ng th√°i hi·ªán t·∫°i
function updateAudioButtonsUI() {
    // Sound buttons
    var soundBtns = document.querySelectorAll('.sound-btn');
    for (var i = 0; i < soundBtns.length; i++) {
        var btn = soundBtns[i];
        if (audioSettings.isSfxMuted) {
            btn.classList.add('active');
        } else {
            btn.classList.remove('active');
        }
        var img = btn.querySelector('img');
        if (img) {
            img.src = audioSettings.isSfxMuted
                ? 'assets/ui/default/btn/sound_off.png'
                : 'assets/ui/default/btn/sound.png';
        }
    }

    // Music buttons
    var musicBtns = document.querySelectorAll('.music-btn');
    for (var j = 0; j < musicBtns.length; j++) {
        var mbtn = musicBtns[j];
        if (audioSettings.isMusicMuted) {
            mbtn.classList.add('active');
        } else {
            mbtn.classList.remove('active');
        }
        var mimg = mbtn.querySelector('img');
        if (mimg) {
            mimg.src = audioSettings.isMusicMuted
                ? 'assets/ui/default/btn/music_off.png'
                : 'assets/ui/default/btn/music.png';
        }
    }
}

function setSfxMuted(muted) {
    audioSettings.isSfxMuted = !!muted;
    try { localStorage.setItem('vj_sfx_muted', audioSettings.isSfxMuted ? '1' : '0'); } catch (e) {}
    updateAudioButtonsUI();
}

function setMusicMuted(muted) {
    audioSettings.isMusicMuted = !!muted;
    try { localStorage.setItem('vj_music_muted', audioSettings.isMusicMuted ? '1' : '0'); } catch (e) {}
    // Khi t·∫Øt nh·∫°c: d·ª´ng m·ªçi track nh·∫°c hi·ªán t·∫°i
    if (audioSettings.isMusicMuted) {
        sounds.menuTheme.pause();
        sounds.bgMusic.pause();
        sounds.winner.pause();
        sounds.gameOver.pause();
        sounds.rating.pause();
    }
    updateAudioButtonsUI();
}

// Danh s√°ch h√¨nh ·∫£nh theo lo·∫°i
var imageCategories = {
    player: [
        'assets/player/vj1.png',
        'assets/player/vj2.png',
        'assets/player/vj3.png',
        'assets/player/vj4.png',
        'assets/player/vj5.png',
        'assets/player/vj6.png',
        'assets/player/vj8.png',
        'assets/player/vj9.png',
        'assets/player/vj10.png',
        'assets/player/vj11.png',
        'assets/player/vj12.png',
        'assets/player/vj13.png',
        'assets/player/vj14.png'
    ],
    horizontal: [
        'assets/fly_horizontal/horizontal_1.png',
        'assets/fly_horizontal/horizontal_2.png',
        'assets/fly_horizontal/horizontal_3.png',
        'assets/fly_horizontal/horizontal_4.png',
        'assets/fly_horizontal/horizontal_5.png',
        'assets/fly_horizontal/horizontal_6.png',
        'assets/fly_horizontal/horizontal_7.png',
        'assets/fly_horizontal/horizontal_8.png'

    ],
    vertical: [
        'assets/fly_vertical/vertical_1.png',
        'assets/fly_vertical/vertical_2.png',
        'assets/fly_vertical/vertical_3.png',
        'assets/fly_vertical/vertical_4.png',
        'assets/fly_vertical/vertical_5.png',
        'assets/fly_vertical/vertical_6.png',
        'assets/fly_vertical/vertical_7.png',
        'assets/fly_vertical/vertical_8.png',
        'assets/fly_vertical/vertical_9.png',
        'assets/fly_vertical/vertical_10.png',
        'assets/fly_vertical/vertical_11.png',
    ],
    cloud: [
        'assets/cloud.png',
        'assets/cloud_2.png'
    ],
    // Th√™m map images ƒë·ªÉ preload
    map: [
        'assets/map/map_1.jpg',
        'assets/map/map_2.jpg',
        'assets/map/map_3.jpg',
        'assets/map/map_4.jpg',
        'assets/map/map_5.jpg',
        'assets/map/map_6.jpg',
        'assets/map/map_7.jpg',
        'assets/map/map_8.jpg',
        'assets/map/map_9.jpg'
    ]
};

// Preload images
var loadedImages = {
    player: [],
    horizontal: [],
    vertical: [],
    cloud: [],
    map: []  // Cache cho map images
};
var imagesLoaded = false;

function preloadImages() {
    var totalImages = 0;
    var loadCount = 0;

    // ƒê·∫øm t·ªïng s·ªë ·∫£nh
    Object.keys(imageCategories).forEach(function(category) {
        totalImages += imageCategories[category].length;
    });

    // Hi·ªÉn th·ªã progress indicator (optional)
    var audioUnlockText = document.querySelector('.audio-unlock-content p');
    if (audioUnlockText) {
        audioUnlockText.textContent = 'ƒêang t·∫£i... 0%';
    }

    // Load t·ª´ng category
    Object.keys(imageCategories).forEach(function(category) {
        imageCategories[category].forEach(function(src, index) {
            var img = new Image();
            img.onload = function () {
                loadCount++;
                
                // C·∫≠p nh·∫≠t progress
                var progress = Math.round((loadCount / totalImages) * 100);
                if (audioUnlockText) {
                    audioUnlockText.textContent = 'ƒêang t·∫£i... ' + progress + '%';
                }
                
                if (loadCount === totalImages) {
                    imagesLoaded = true;
                    // ƒê·ªïi text khi load xong
                    if (audioUnlockText) {
                        audioUnlockText.textContent = 'Ch·∫°m ƒë·ªÉ b·∫Øt ƒë·∫ßu';
                    }
                }
            };
            img.onerror = function() {
                // X·ª≠ l√Ω l·ªói load ·∫£nh (v·∫´n t√≠nh l√† ƒë√£ "load")
                loadCount++;
                var progress = Math.round((loadCount / totalImages) * 100);
                if (audioUnlockText) {
                    audioUnlockText.textContent = 'ƒêang t·∫£i... ' + progress + '%';
                }
                if (loadCount === totalImages) {
                    imagesLoaded = true;
                    if (audioUnlockText) {
                        audioUnlockText.textContent = 'Ch·∫°m ƒë·ªÉ b·∫Øt ƒë·∫ßu';
                    }
                }
            };
            img.src = src;
            loadedImages[category].push(img);
        });
    });
}

// Game state
var gameState = {
    caughtPlanes: 0,
    totalPlanes: CAMPAIGN_SETTINGS.totalVietjetPlanes,     // D√πng t·ª´ campaign settings
    vietjetSpawned: 0,    // S·ªë m√°y bay VietJet ƒë√£ xu·∫•t hi·ªán
    maxVietjet: CAMPAIGN_SETTINGS.totalVietjetPlanes,      // D√πng t·ª´ campaign settings
    chances: CAMPAIGN_SETTINGS.maxLives,                   // D√πng t·ª´ campaign settings
    planesSpawned: 0,
    isGameRunning: false,
    planes: [],
    canvas: null,
    ctx: null,
    animationFrame: null,
    timeLeft: CAMPAIGN_SETTINGS.gameTime,
    timerInterval: null,
    selectedMap: 1,       // Map m·∫∑c ƒë·ªãnh
    mapBackground: null,  // Image object c·ªßa map
    headerHeight: 0,      // Chi·ªÅu cao header (s·∫Ω ƒë∆∞·ª£c t√≠nh ƒë·ªông)
    // Virtual Resolution System
    virtualWidth: GAME_CONFIG.VIRTUAL_WIDTH,   // Chi·ªÅu r·ªông ·∫£o
    virtualHeight: GAME_CONFIG.VIRTUAL_HEIGHT, // Chi·ªÅu cao ·∫£o
    canvasWidth: 0,       // Canvas display width (viewport)
    canvasHeight: 0,      // Canvas display height (viewport)
    scale: 1,             // T·ª∑ l·ªá scale t·ª´ virtual ‚Üí screen
    devicePixelRatio: 1,  // Device pixel ratio ƒë∆∞·ª£c s·ª≠ d·ª•ng
    resizeTimeout: null   // Timeout cho debounce resize
};

// Chuy·ªÉn m√†n h√¨nh
function showScreen(screenId) {
    var screens = document.querySelectorAll('.screen');
    
    // QUAN TR·ªåNG: Chrome 44 KH√îNG h·ªó tr·ª£ forEach() cho NodeList!
    // Ph·∫£i d√πng v√≤ng l·∫∑p for truy·ªÅn th·ªëng
    for (var i = 0; i < screens.length; i++) {
        screens[i].classList.remove('active');
    }
    
    document.getElementById(screenId).classList.add('active');
}

// Modal functions
function showRulesModal() {
    document.getElementById('rules-modal').classList.add('active');
}

function closeRulesModal() {
    document.getElementById('rules-modal').classList.remove('active');
}

// M√†n h√¨nh kh·∫£o s√°t - G·ªôp chung 2 c√¢u h·ªèi
// ============================================
// SETTINGS POPUP MANAGEMENT
// ============================================

function showSettingsPopup() {
    var popup = document.getElementById('settings-popup');
    if (popup) {
        popup.classList.add('active');
        // Prevent body scroll when popup is open
        document.body.style.overflow = 'hidden';
    }
}

function hideSettingsPopup() {
    var popup = document.getElementById('settings-popup');
    if (popup) {
        popup.classList.remove('active');
        // Restore body scroll
        document.body.style.overflow = '';
    }
}

function setupSettingsPopupEvents() {
    // Close popup when clicking overlay
    var overlay = document.querySelector('.settings-overlay');
    if (overlay) {
        addClickLikeHandler(overlay, hideSettingsPopup);
    }
    
    // Close button
    var closeBtn = document.getElementById('settings-close');
    if (closeBtn) {
        addClickLikeHandler(closeBtn, function(e) {
            e.stopPropagation();
            playSoundSafe(sounds.tap);
            hideSettingsPopup();
        });
    }
    
    // Sound buttons (c√≥ th·ªÉ c√≥ nhi·ªÅu n∆°i)
    var soundBtns = document.querySelectorAll('.sound-btn');
    if (soundBtns && soundBtns.length) {
        for (var i = 0; i < soundBtns.length; i++) {
            (function(btn){
                addClickLikeHandler(btn, function(e) {
                    e.stopPropagation();
                    playSoundSafe(sounds.tap);
                    setSfxMuted(!audioSettings.isSfxMuted);
                });
            })(soundBtns[i]);
        }
    }
    
    // Music buttons (c√≥ th·ªÉ c√≥ nhi·ªÅu n∆°i)
    var musicBtns = document.querySelectorAll('.music-btn');
    if (musicBtns && musicBtns.length) {
        for (var j = 0; j < musicBtns.length; j++) {
            (function(btn){
                addClickLikeHandler(btn, function(e) {
                    e.stopPropagation();
                    playSoundSafe(sounds.tap);
                    var willMute = !audioSettings.isMusicMuted;
                    setMusicMuted(willMute);
                    if (!willMute) {
                        // N·∫øu v·ª´a b·∫≠t nh·∫°c, ph√°t l·∫°i track ph√π h·ª£p theo ng·ªØ c·∫£nh
                        var isInGame = document.getElementById('game-screen').classList.contains('active');
                        if (isInGame) {
                            playSoundSafe(sounds.bgMusic);
                        } else {
                            playSoundSafe(sounds.menuTheme);
                        }
                    }
                });
            })(musicBtns[j]);
        }
    }
    
    // Info button
    var infoBtn = document.querySelector('.info-btn');
    if (infoBtn) {
        addClickLikeHandler(infoBtn, function(e) {
            e.stopPropagation();
            playSoundSafe(sounds.tap);
            console.log('Info clicked - Show game info');
            // Show info modal here
        });
    }
    
    // Exit button
    var exitBtn = document.querySelector('.exit-btn');
    if (exitBtn) {
        addClickLikeHandler(exitBtn, function(e) {
            e.stopPropagation();
            playSoundSafe(sounds.tap);
            console.log('Exit game clicked');
            // Exit game logic here
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t game?')) {
                window.close();
            }
        });
    }
    
    // Themes button
    var themesBtn = document.querySelector('.themes-btn');
    if (themesBtn) {
        addClickLikeHandler(themesBtn, function(e) {
            e.stopPropagation();
            playSoundSafe(sounds.tap);
            console.log('Themes clicked');
        });
    }
    
    // Help button
    var helpBtn = document.querySelector('.help-btn');
    if (helpBtn) {
        addClickLikeHandler(helpBtn, function(e) {
            e.stopPropagation();
            playSoundSafe(sounds.tap);
            console.log('Help clicked');
        });
    }
}

function showSurvey() {
    try {
        showScreen('survey-screen');
        // Reset v·ªÅ c√¢u h·ªèi 1
        showQuestion(1);
    } catch (error) {
        // Error in showSurvey
    }
}

// Hi·ªÉn th·ªã c√¢u h·ªèi c·ª• th·ªÉ (1 ho·∫∑c 2)
function showQuestion(questionNumber) {
    // ·∫®n t·∫•t c·∫£ c√¢u h·ªèi
    document.getElementById('question-1').style.display = 'none';
    document.getElementById('question-2').style.display = 'none';
    
    // Hi·ªÉn th·ªã c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn
    document.getElementById('question-' + questionNumber).style.display = 'block';
    
    // C·∫≠p nh·∫≠t text intro v√† button
    var introText = document.getElementById('survey-intro');
    var button = document.getElementById('survey-continue-btn');
    
    if (questionNumber === 1) {
        introText.textContent = 'Tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ch∆°i, xin ph√©p b·∫°n tr·∫£ l·ªùi 2 c√¢u h·ªèi sau ƒë√¢y nh√©';
    } else {
    }
}

// X·ª≠ l√Ω n√∫t ti·∫øp t·ª•c trong kh·∫£o s√°t
function nextQuestion() {
    var currentQuestion = document.getElementById('question-1').style.display !== 'none' ? 1 : 2;
    
    if (currentQuestion === 1) {
        // Validate c√¢u h·ªèi 1
        var q1 = document.querySelector('input[name="q1"]:checked');
        if (!q1) {
            showFlashMessage('flash-message');
            return;
        }
        // Chuy·ªÉn sang c√¢u h·ªèi 2
        showQuestion(2);
    } else {
        // Validate c√¢u h·ªèi 2
        var q2 = document.querySelector('input[name="q2"]:checked');
        if (!q2) {
            showFlashMessage('flash-message');
            return;
        }
        // Chuy·ªÉn sang m√†n gi·ªõi thi·ªáu
        showScreen('intro-screen');
    }
}

// Hi·ªÉn th·ªã flash message khi thi·∫øu c√¢u tr·∫£ l·ªùi
function showFlashMessage(messageId) {
    var flashMessage = document.getElementById(messageId || 'flash-message');

    // Hi·ªÉn th·ªã message v·ªõi animation
    flashMessage.classList.add('show');

    // ·∫®n message sau 3 gi√¢y
    setTimeout(function () {
        flashMessage.classList.remove('show');
    }, 3000);
}

// ============================================
// GACHA ANIMATION - Random Map Selection (ƒê√É B·ªé - KH√îNG D√ôNG N·ªÆA)
// ============================================
// Gi·ªù game s·∫Ω v√†o ch∆°i tr·ª±c ti·∫øp khi b·∫•m "B·∫Øt ƒë·∫ßu", kh√¥ng random map n·ªØa

/*
var gachaState = {
    isSpinning: false,
    selectedMapId: null
};

// Hi·ªÉn th·ªã m√†n h√¨nh gacha v√† b·∫Øt ƒë·∫ßu animation
function showGachaAnimation() {
    showScreen('gacha-screen');
    
    // T·∫Øt nh·∫°c menu theme ƒë·ªÉ nghe r√µ wheel sound
    sounds.menuTheme.pause();
    
    // T·∫°o slot items
    renderSlotItems();
    
    // B·∫Øt ƒë·∫ßu spin sau 500ms
    setTimeout(function() {
        startGachaSpin();
    }, 500);
}
*/

/*
// Render c√°c map items v√†o slot
function renderSlotItems() {
    var slotContent = document.getElementById('slot-content');
    if (!slotContent) return;
    
    slotContent.innerHTML = '';
    
    // T·∫°o nhi·ªÅu l·∫ßn l·∫∑p ƒë·ªÉ c√≥ hi·ªáu ·ª©ng xoay d√†i (3 v√≤ng)
    var loops = 3;
    for (var loop = 0; loop < loops; loop++) {
        MAPS_CONFIG.forEach(function(map, index) {
            var slotItem = document.createElement('div');
            slotItem.className = 'slot-item';
            slotItem.setAttribute('data-map-id', map.id);
            
            // T·∫°o m·ªõi image element v√† LU√îN set src
            var img = document.createElement('img');
            img.src = map.image; // QUAN TR·ªåNG: Set src t·ª´ MAPS_CONFIG
            img.alt = map.name;
            
            // N·∫øu ƒë√£ c√≥ cached image th√¨ d√πng ƒë·ªÉ tr√°nh load l·∫°i
            if (imagesLoaded && loadedImages.map && loadedImages.map[index]) {
                // Copy src t·ª´ cached image
                img.src = loadedImages.map[index].src;
            }
            
            slotItem.appendChild(img);
            slotContent.appendChild(slotItem);
        });
    }
}

// B·∫Øt ƒë·∫ßu animation quay gacha
function startGachaSpin() {
    if (gachaState.isSpinning) return;
    
    gachaState.isSpinning = true;
    
    var slotContent = document.getElementById('slot-content');
    
    // Random ch·ªçn map
    var randomIndex = Math.floor(Math.random() * MAPS_CONFIG.length);
    gachaState.selectedMapId = MAPS_CONFIG[randomIndex].id;
    
    sounds.wheel.play();
    
    // T√≠nh to√°n v·ªã tr√≠ cu·ªëi c√πng ngay t·ª´ ƒë·∫ßu
    var selectedIndex = MAPS_CONFIG.findIndex(function(m) {
        return m.id === gachaState.selectedMapId;
    });
    var targetIndex = MAPS_CONFIG.length * 2 + selectedIndex; // V√≤ng 3 + v·ªã tr√≠
    var itemHeight = 220;
    
    // T√≠nh kho·∫£ng c√°ch c·∫ßn scroll (scroll nhi·ªÅu v√≤ng ƒë·ªÉ c√≥ hi·ªáu ·ª©ng ƒë·∫πp)
    var totalDistance = targetIndex * itemHeight;
    
    // Animation quay m∆∞·ª£t v·ªõi easing function t√πy ch·ªânh
    animateGachaSpin(slotContent, totalDistance, GACHA_CONFIG.SPIN_DURATION);
}

// Easing function: ch·∫≠m ‚Üí nhanh ‚Üí ch·∫≠m (ease-in-out)
function easeInOutCubic(t) {
    return t < 0.5
        ? 4 * t * t * t
        : 1 - Math.pow(-2 * t + 2, 3) / 2;
}

// Animation gacha v·ªõi easing m∆∞·ª£t m√†
function animateGachaSpin(element, targetDistance, duration) {
    var startTime = Date.now();
    var startPosition = 0;
    
    function animate() {
        var currentTime = Date.now();
        var elapsed = currentTime - startTime;
        var progress = Math.min(elapsed / duration, 1); // 0 ‚Üí 1
        
        // √Åp d·ª•ng easing function
        var easedProgress = easeInOutCubic(progress);
        
        // T√≠nh v·ªã tr√≠ hi·ªán t·∫°i
        var currentPosition = startPosition - (targetDistance * easedProgress);
        
        // C·∫≠p nh·∫≠t transform
        element.style.transform = 'translateY(' + currentPosition + 'px)';
        
        // Ti·∫øp t·ª•c animation n·∫øu ch∆∞a xong
        if (progress < 1) {
            requestAnimationFrame(animate);
        } else {
            // Animation xong, g·ªçi stopGachaSpin
            stopGachaSpin();
        }
    }
    
    // B·∫Øt ƒë·∫ßu animation
    animate();
}

// D·ª´ng animation v√† hi·ªÉn th·ªã k·∫øt qu·∫£
function stopGachaSpin() {
    var slotContent = document.getElementById('slot-content');
    var resultText = document.getElementById('gacha-result');
    
    // D·ª´ng √¢m thanh wheel
    sounds.wheel.pause();
    sounds.wheel.currentTime = 0;
    
    // T√≠nh v·ªã tr√≠ cu·ªëi c√πng ƒë·ªÉ hi·ªÉn th·ªã map ƒë√£ ch·ªçn ·ªü gi·ªØa ch√≠nh x√°c
    var selectedMap = MAPS_CONFIG.find(function(m) {
        return m.id === gachaState.selectedMapId;
    });
    
    var itemHeight = 220;
    var selectedIndex = MAPS_CONFIG.findIndex(function(m) {
        return m.id === gachaState.selectedMapId;
    });
    
    // V·ªã tr√≠ ·ªü v√≤ng th·ª© 2 (middle loop) + center offset
    var targetIndex = MAPS_CONFIG.length + selectedIndex;
    var finalOffset = -(targetIndex * itemHeight) + 40; // +40 ƒë·ªÉ center ch√≠nh x√°c
    
    // Smooth transition nh·∫π ƒë·ªÉ ƒëi·ªÅu ch·ªânh v·ªã tr√≠ cu·ªëi (bounce effect)
    var transitionDuration = GACHA_CONFIG.STOP_TRANSITION_DURATION / 1000;
    slotContent.style.transition = 'transform ' + transitionDuration + 's cubic-bezier(0.175, 0.885, 0.32, 1.275)'; // Ease-out-back (c√≥ bounce nh·∫π)
    slotContent.style.transform = 'translateY(' + finalOffset + 'px)';
    
    // Ph√°t √¢m thanh k·∫øt qu·∫£ ngay l·∫≠p t·ª©c
    playSoundSafe(sounds.touchRight);
    
    // Hi·ªÉn th·ªã t√™n map sau m·ªôt ch√∫t
    setTimeout(function() {
        resultText.classList.add('show-result');
        resultText.innerHTML = `
        <p>üåè H√†nh tr√¨nh m·ªõi b·∫Øt ƒë·∫ßu t·∫°i <b>${selectedMap.name}</b>!<br>S·∫µn s√†ng b·∫Øt m√°y bay VietJet ch∆∞a? ‚úàÔ∏è</p>
      `;
              
        gachaState.isSpinning = false;
        
        // Chuy·ªÉn sang game sau th·ªùi gian delay
        setTimeout(function() {
            selectMap(gachaState.selectedMapId);
        }, GACHA_CONFIG.GO_TO_GAME_DELAY);
    }, 2000); // 500ms ƒë·ªÉ animation bounce xong
}
*/

// ============================================
// OLD MAP CAROUSEL CODE (COMMENTED OUT - KH√îNG D√ôNG N·ªÆA)
// ============================================
// Map carousel functions ƒë√£ ƒë∆∞·ª£c thay th·∫ø b·ªüi Gacha Animation
/*
function updateMapSlider() { ... }
function updateCarouselButtons() { ... }
function slideMapPrev() { ... }
function slideMapNext() { ... }
function initCarouselSwipe() { ... }
... (t·∫•t c·∫£ carousel code ƒë√£ b·ªã x√≥a)
*/

// Function ƒë·ªÉ l·∫•y ƒë∆∞·ªùng d·∫´n map v·ªõi extension ph√π h·ª£p (jpg ho·∫∑c png)
function getMapPath(mapId) {
    var basePath = 'assets/map/map_' + mapId;
    
    // ∆Øu ti√™n c√°c extension theo th·ª© t·ª±: jpg, png, jpeg, webp
    var extensions = ['jpg', 'png', 'jpeg', 'webp'];
    
    // Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n v·ªõi extension ƒë·∫ßu ti√™n (jpg m·∫∑c ƒë·ªãnh)
    // N·∫øu file kh√¥ng t·ªìn t·∫°i, browser s·∫Ω t·ª± ƒë·ªông fallback ho·∫∑c hi·ªÉn th·ªã l·ªói
    return basePath + '.jpg';
}

// Function ƒë·ªÉ th·ª≠ load image v·ªõi fallback extension
function loadMapImage(mapId, callback) {
    var basePath = 'assets/map/map_' + mapId;
    var extensions = ['jpg', 'png', 'jpeg', 'webp'];
    var currentIndex = 0;
    
    function tryLoadImage() {
        if (currentIndex >= extensions.length) {
            callback(null);
            return;
        }
        
        var img = new Image();
        img.onload = function() {
            callback(basePath + '.' + extensions[currentIndex]);
        };
        img.onerror = function() {
            currentIndex++;
            tryLoadImage();
        };
        img.src = basePath + '.' + extensions[currentIndex];
    }
    
    tryLoadImage();
}

// Ch·ªçn map v√† b·∫Øt ƒë·∫ßu game lu√¥n
function selectMap(mapId) {
    gameState.selectedMap = mapId;

    // Load ·∫£nh map v·ªõi fallback extension
    loadMapImage(mapId, function(mapPath) {
        if (mapPath) {
            gameState.mapBackground = new Image();
            gameState.mapBackground.src = mapPath;
        } else {
            // Fallback v·ªÅ jpg n·∫øu kh√¥ng t√¨m th·∫•y file n√†o
            gameState.mapBackground = new Image();
            gameState.mapBackground.src = getMapPath(mapId);
        }
        
        // B·∫Øt ƒë·∫ßu game lu√¥n (kh√¥ng c·∫ßn ch·ªçn ƒë·ªô kh√≥)
        startGame();
    });
}

function startGame() {
    showScreen('game-screen');
    
    // Set background map cho game screen v·ªõi fallback extension
    var gameScreen = document.getElementById('game-screen');
    loadMapImage(gameState.selectedMap, function(mapPath) {
        if (mapPath) {
            gameScreen.style.backgroundImage = 'url(\'' + mapPath + '\')';
        } else {
            // Fallback v·ªÅ jpg n·∫øu kh√¥ng t√¨m th·∫•y file n√†o
            var fallbackPath = getMapPath(gameState.selectedMap);
            gameScreen.style.backgroundImage = 'url(\'' + fallbackPath + '\')';
        }
        gameScreen.style.backgroundSize = 'cover';
        gameScreen.style.backgroundPosition = 'center';
    });
    
    // Hi·ªÉn th·ªã countdown tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu game
    showCountdown();
}

function showCountdown() {
    var overlay = document.getElementById('countdown-overlay');
    var numberElement = document.getElementById('countdown-number');
    
    // Hi·ªÉn th·ªã overlay
    overlay.classList.add('active');
    
    var count = 3;
    numberElement.textContent = count;
    
    // Ph√°t √¢m thanh beep cho s·ªë 3
    playSoundSafe(sounds.timerBeep);
    
    var countdownInterval = setInterval(function() {
        count--;
        
        if (count > 0) {
            // Hi·ªÉn th·ªã s·ªë 2, 1
            numberElement.textContent = count;
            
            // Ph√°t √¢m thanh beep
            playSoundSafe(sounds.timerBeep);
            
            // Reset animation b·∫±ng c√°ch x√≥a v√† th√™m l·∫°i class
            numberElement.style.animation = 'none';
            setTimeout(function() {
                numberElement.style.animation = 'countdownPulse 1s ease-out';
            }, 10);
        } else {
            // ·∫®n countdown overlay
            overlay.classList.remove('active');
            
            // D·ª´ng nh·∫°c menu theme (t√¥n tr·ªçng tr·∫°ng th√°i nh·∫°c)
            sounds.menuTheme.pause();
            sounds.menuTheme.currentTime = 0;
            
            // B·∫Øt ƒë·∫ßu game lu√¥n (b·ªè cut-in animation)
            initGame();
            
            // Ph√°t nh·∫°c n·ªÅn game n·∫øu kh√¥ng mute nh·∫°c
            playSoundSafe(sounds.bgMusic);
            
            clearInterval(countdownInterval);
            
            // Reset v·ªÅ 3 cho l·∫ßn sau (sau khi overlay ƒë√£ ·∫©n)
            setTimeout(function() {
                numberElement.textContent = '3';
            }, 500);
        }
    }, 1000);
}

// Cut-in Animation - ƒê√É B·ªé (kh√¥ng d√πng n·ªØa)
// Gi·ªù sau countdown 3-2-1 s·∫Ω v√†o game lu√¥n
/*
function showCutinAnimation() {
    var cutinOverlay = document.getElementById('cutin-overlay');
    
    // D·ª´ng nh·∫°c menu theme
    sounds.menuTheme.pause();
    sounds.menuTheme.currentTime = 0;
    
    // Ph√°t √¢m thanh cut-in ngay khi animation b·∫Øt ƒë·∫ßu
    playSoundSafe(sounds.cutIn);
    
    // Hi·ªÉn th·ªã cut-in
    cutinOverlay.classList.add('active');
    
    // Sau 2 gi√¢y, fade out v√† b·∫Øt ƒë·∫ßu game (ƒë·ªÉ animation ch·∫°y ƒë·ªß)
    setTimeout(function() {
        cutinOverlay.classList.add('fadeout');
        
        // ƒê·ª£i fade out xong r·ªìi m·ªõi b·∫Øt ƒë·∫ßu game
        setTimeout(function() {
            cutinOverlay.classList.remove('active', 'fadeout');
            
            // B·∫Øt ƒë·∫ßu game th·∫≠t s·ª±
            initGame();
            
            // Ph√°t nh·∫°c n·ªÅn game
            playSoundSafe(sounds.bgMusic);
        }, 500);
    }, 2000);
}
*/

// Kh·ªüi t·∫°o game
function initGame() {
    gameState.caughtPlanes = 0;
    gameState.planesSpawned = 0;
    gameState.vietjetSpawned = 0;
    gameState.planes = [];
    gameState.isGameRunning = true;
    
    // √Åp d·ª•ng campaign settings
    gameState.timeLeft = CAMPAIGN_SETTINGS.gameTime;
    gameState.chances = CAMPAIGN_SETTINGS.maxLives;
    gameState.totalPlanes = CAMPAIGN_SETTINGS.totalVietjetPlanes;
    gameState.maxVietjet = CAMPAIGN_SETTINGS.totalVietjetPlanes;

    gameState.canvas = document.getElementById('game-canvas');
    gameState.ctx = gameState.canvas.getContext('2d');

    // Set canvas size
    resizeCanvas();
    window.addEventListener('resize', handleWindowResize);
    window.addEventListener('orientationchange', handleOrientationChange);

    // Update UI
    updateScore();
    updateTimer();

    // Start countdown timer
    startTimer();

    // Start spawning planes
    spawnPlane();

    // Start game loop
    gameLoop();

    // Add touch/click event - d√πng touchstart cho Android c≈©
    gameState.canvas.addEventListener('touchstart', handleCanvasTouch, false);
    gameState.canvas.addEventListener('click', handleCanvasClick, false);
}

function resizeCanvas() {
    if (!gameState.canvas) return;

    // T√≠nh chi·ªÅu cao header ƒë·ªông
    var header = document.querySelector('.game-header');
    gameState.headerHeight = header ? header.offsetHeight : 80;

    // B∆∞·ªõc 1: L·∫•y k√≠ch th∆∞·ªõc viewport th·ª±c t·∫ø
    var viewportWidth = window.innerWidth;
    var viewportHeight = window.innerHeight;
    
    // ƒê·∫£m b·∫£o k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu
    viewportWidth = Math.max(viewportWidth, 320);
    viewportHeight = Math.max(viewportHeight, 480);
    
    // B∆∞·ªõc 2: L·∫•y v√† t·ªëi ∆∞u Device Pixel Ratio
    var dpr = window.devicePixelRatio || 1;
    
    // Gi·ªõi h·∫°n DPR ƒë·ªÉ tr√°nh lag (t·ªëi ƒëa = 3)
    if (dpr > 3) {
        dpr = 3;
    }
    
    // B∆∞·ªõc 3: T√≠nh scale ƒë·ªÉ fit virtual resolution v√†o viewport
    // D√πng MAX ƒë·ªÉ fill full m√†n h√¨nh (c√≥ th·ªÉ crop m·ªôt ch√∫t nh∆∞ng kh√¥ng c√≥ kho·∫£ng tr·ªëng)
    var scaleX = viewportWidth / gameState.virtualWidth;
    var scaleY = viewportHeight / gameState.virtualHeight;
    var scale = Math.max(scaleX, scaleY);
    
    // B∆∞·ªõc 4: Set canvas buffer size = viewport √ó DPR (cho s·∫Øc n√©t)
    gameState.canvas.width = viewportWidth * dpr;
    gameState.canvas.height = viewportHeight * dpr;
    
    // B∆∞·ªõc 5: Set canvas CSS size = viewport (ph·ªß full m√†n)
    gameState.canvas.style.width = viewportWidth + 'px';
    gameState.canvas.style.height = viewportHeight + 'px';
    
    // B∆∞·ªõc 6: Scale context = scale √ó DPR
    var contextScale = scale * dpr;
    gameState.ctx.setTransform(contextScale, 0, 0, contextScale, 0, 0);
    
    // B∆∞·ªõc 7: C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng render
    gameState.ctx.imageSmoothingEnabled = true;
    if (gameState.ctx.imageSmoothingQuality) {
        gameState.ctx.imageSmoothingQuality = dpr >= 2 ? 'high' : 'medium';
    }
    
    // B∆∞·ªõc 8: L∆∞u state
    gameState.canvasWidth = viewportWidth;
    gameState.canvasHeight = viewportHeight;
    gameState.scale = scale;
    gameState.devicePixelRatio = dpr;
}


// Function ƒë·ªÉ x·ª≠ l√Ω resize window
function handleWindowResize() {
    // Debounce resize ƒë·ªÉ tr√°nh g·ªçi qu√° nhi·ªÅu l·∫ßn
    clearTimeout(gameState.resizeTimeout);
    gameState.resizeTimeout = setTimeout(function() {
        if (gameState.canvas) {
            resizeCanvas();
            // Redraw game n·∫øu ƒëang ch·∫°y
            if (gameState.isGameRunning) {
                draw();
            }
        }
    }, 100);
}

// Function ƒë·ªÉ x·ª≠ l√Ω orientation change
function handleOrientationChange() {
    // Delay ƒë·ªÉ ƒë·∫£m b·∫£o window ƒë√£ resize xong
    setTimeout(function() {
        if (gameState.canvas) {
            resizeCanvas();
            // Redraw game n·∫øu ƒëang ch·∫°y
            if (gameState.isGameRunning) {
                draw();
            }
        }
    }, 200);
}

function handleCanvasClick(e) {
    if (!gameState.isGameRunning) return;
    var rect = gameState.canvas.getBoundingClientRect();
    // Screen coordinates
    var screenX = e.clientX - rect.left;
    var screenY = e.clientY - rect.top;
    
    // Convert screen coords ‚Üí virtual coords
    var virtualX = screenX / gameState.scale;
    var virtualY = screenY / gameState.scale;
    
    checkHit(virtualX, virtualY);
}

function handleCanvasTouch(e) {
    if (!gameState.isGameRunning) return;
    
    // L·∫•y t·ªça ƒë·ªô t·ª´ touch ho·∫∑c changedTouches (cho touchend)
    var touch = e.touches && e.touches[0] ? e.touches[0] : 
                (e.changedTouches && e.changedTouches[0] ? e.changedTouches[0] : null);
    
    if (!touch) {
        return;
    }
    
    // QUAN TR·ªåNG: preventDefault() PH·∫¢I ƒë∆∞·ª£c g·ªçi ƒë·ªÉ tr√°nh double-tap zoom tr√™n Android c≈©
    try {
        e.preventDefault();
    } catch (err) {
        // preventDefault failed
    }
    
    var rect = gameState.canvas.getBoundingClientRect();
    // Screen coordinates
    var screenX = touch.clientX - rect.left;
    var screenY = touch.clientY - rect.top;
    
    // Convert screen coords ‚Üí virtual coords
    var virtualX = screenX / gameState.scale;
    var virtualY = screenY / gameState.scale;
    
    checkHit(virtualX, virtualY);
}

function checkHit(x, y) {
    var hit = false;

    for (var i = gameState.planes.length - 1; i >= 0; i--) {
        var plane = gameState.planes[i];
        var distance = Math.sqrt(
            Math.pow(x - plane.x, 2) + Math.pow(y - plane.y, 2)
        );

        // TƒÉng hitbox b·∫±ng HITBOX_MULTIPLIER ƒë·ªÉ d·ªÖ click h∆°n
        var hitRadius = (plane.size / 2) * GAME_CONFIG.HITBOX_MULTIPLIER;

        if (distance < hitRadius) {
            // Hit!
            hit = true;
            gameState.planes.splice(i, 1);

            if (plane.type === 'player') {
                // Ch·∫°m v√†o m√°y bay VietJet -> +1 ƒëi·ªÉm
                gameState.caughtPlanes++;

                // Th∆∞·ªüng th√™m th·ªùi gian
                gameState.timeLeft += CAMPAIGN_SETTINGS.timeBonus;
                updateTimer();
                showTimeBonusEffect();

                showHitEffect(x, y, true);
                playSoundSafe(sounds.touchRight);
            } else {
                // Ch·∫°m nh·∫ßm v√†o horizontal/vertical -> -1 m·∫°ng
                gameState.chances--;
                showHitEffect(x, y, false);
                playSoundSafe(sounds.bruh);
            }

            updateScore();
            checkGameEnd();
            break;
        }
    }

    // Kh√¥ng l√†m g√¨ khi miss (kh√¥ng click tr√∫ng g√¨)
}

function showHitEffect(x, y, isHit) {
    // T·∫°o v√≤ng tr√≤n lan t·ªèa (ripple)
    var ripple = {
        x: x,
        y: y,
        radius: 0,
        maxRadius: isHit ? 80 : 60,
        alpha: 1,
        color: isHit ? '#4CAF50' : '#F44336'
    };

    // T·∫°o particles bay t·ª© tung
    var particles = [];
    var particleCount = isHit ? 8 : 6;
    for (var i = 0; i < particleCount; i++) {
        var angle = (Math.PI * 2 / particleCount) * i;
        particles.push({
            x: x,
            y: y,
            vx: Math.cos(angle) * (2 + Math.random() * 3),
            vy: Math.sin(angle) * (2 + Math.random() * 3),
            size: 8 + Math.random() * 6,
            alpha: 1,
            color: isHit ? '#4CAF50' : '#F44336'
        });
    }

    // Text effect
    var text = isHit ? '+1' : 'X';
    var textEffect = {
        x: x,
        y: y,
        text: text,
        color: isHit ? '#4CAF50' : '#F44336',
        alpha: 1,
        size: 40,
        scale: 0.5
    };

    var frame = 0;
    var animate = function () {
        if (frame < 40) {
            gameState.ctx.save();

            // V·∫Ω ripple
            if (ripple.alpha > 0) {
                gameState.ctx.globalAlpha = ripple.alpha;
                gameState.ctx.strokeStyle = ripple.color;
                gameState.ctx.lineWidth = 4;
                gameState.ctx.beginPath();
                gameState.ctx.arc(ripple.x, ripple.y, ripple.radius, 0, Math.PI * 2);
                gameState.ctx.stroke();

                ripple.radius += 3;
                ripple.alpha -= 0.03;
            }

            // V·∫Ω particles
            particles.forEach(function(p) {
                if (p.alpha > 0) {
                    gameState.ctx.globalAlpha = p.alpha;
                    gameState.ctx.fillStyle = p.color;
                    gameState.ctx.shadowBlur = 10;
                    gameState.ctx.shadowColor = p.color;
                    gameState.ctx.beginPath();
                    gameState.ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
                    gameState.ctx.fill();

                    p.x += p.vx;
                    p.y += p.vy;
                    p.vy += 0.2; // Gravity
                    p.size *= 0.96;
                    p.alpha -= 0.03;
                }
            });

            // V·∫Ω text v·ªõi bounce effect
            if (textEffect.alpha > 0) {
                // Bounce scale
                if (frame < 10) {
                    textEffect.scale = 0.5 + (frame / 10) * 0.7; // 0.5 -> 1.2
                } else if (frame < 15) {
                    textEffect.scale = 1.2 - ((frame - 10) / 5) * 0.2; // 1.2 -> 1.0
                }

                gameState.ctx.globalAlpha = textEffect.alpha;
                gameState.ctx.font = 'bold ' + (textEffect.size * textEffect.scale) + 'px Arial';
                gameState.ctx.fillStyle = textEffect.color;
                gameState.ctx.textAlign = 'center';
                gameState.ctx.textBaseline = 'middle';

                // Glow effect
                gameState.ctx.shadowBlur = 20;
                gameState.ctx.shadowColor = textEffect.color;

                gameState.ctx.fillText(textEffect.text, textEffect.x, textEffect.y);

                textEffect.y -= 2;
                textEffect.alpha -= 0.025;
            }

            gameState.ctx.restore();

            frame++;
            requestAnimationFrame(animate);
        }
    };
    animate();
}

function updateScore() {
    document.getElementById('caught-count').textContent =
        gameState.caughtPlanes + '/' + gameState.totalPlanes;
    document.getElementById('chances-left').textContent = gameState.chances;
    document.getElementById('vietjet-spawned').textContent =
        gameState.vietjetSpawned + '/' + gameState.maxVietjet;
}


// Timer functions
function startTimer() {
    // Clear existing timer n·∫øu c√≥
    if (gameState.timerInterval) {
        clearInterval(gameState.timerInterval);
    }

    gameState.timerInterval = setInterval(function () {
        if (gameState.isGameRunning) {
            gameState.timeLeft--;
            updateTimer();

            // Ki·ªÉm tra h·∫øt gi·ªù
            if (gameState.timeLeft <= 0) {
                clearInterval(gameState.timerInterval);
                // Check ƒëi·ªÅu ki·ªán th·∫Øng thua
                if (gameState.caughtPlanes >= CAMPAIGN_SETTINGS.requiredPlanes) {
                    endGame(true); // Th·∫Øng n·∫øu ƒë·ªß s·ªë m√°y bay y√™u c·∫ßu
                } else {
                    endGame(false); // Thua n·∫øu kh√¥ng ƒë·ªß
                }
            }
        }
    }, 1000);
}

function updateTimer() {
    var timerElement = document.getElementById('time-left');
    timerElement.textContent = gameState.timeLeft + 's';

    // Th√™m class warning/danger d·ª±a v√†o th·ªùi gian c√≤n l·∫°i
    timerElement.classList.remove('warning', 'danger');

    if (gameState.timeLeft <= 3) {
        timerElement.classList.add('danger');
    } else if (gameState.timeLeft <= 5) {
        timerElement.classList.add('warning');
    }
}

function showTimeBonusEffect() {
    var timerElement = document.getElementById('time-left');

    // T·∫°o element hi·ªÉn th·ªã "+2s"
    var bonusText = document.createElement('div');
    bonusText.className = 'time-bonus-effect';
    bonusText.textContent = '+' + CAMPAIGN_SETTINGS.timeBonus + 's';

    // Th√™m v√†o v·ªã tr√≠ timer
    var scoreBox = timerElement.closest('.score-box');
    scoreBox.appendChild(bonusText);

    // Flash effect cho timer
    timerElement.classList.add('time-bonus-flash');

    // X√≥a sau 1 gi√¢y
    setTimeout(function () {
        bonusText.remove();
        timerElement.classList.remove('time-bonus-flash');
    }, 1000);
}

function stopTimer() {
    if (gameState.timerInterval) {
        clearInterval(gameState.timerInterval);
        gameState.timerInterval = null;
    }
}

function checkGameEnd() {
    // Th·∫Øng ngay khi b·∫Øt ƒë∆∞·ª£c ƒë·ªß s·ªë m√°y bay y√™u c·∫ßu
    if (gameState.caughtPlanes >= CAMPAIGN_SETTINGS.requiredPlanes) {
        endGame(true);
        return;
    }

    if (gameState.chances <= 0) {
        // Thua khi h·∫øt m·∫°ng
        endGame(false);
    } else if (gameState.vietjetSpawned >= gameState.maxVietjet) {
        // ƒê√£ spawn ƒë·ªß VietJet
        if (gameState.caughtPlanes >= CAMPAIGN_SETTINGS.requiredPlanes) {
            endGame(true); // Th·∫Øng khi ƒë·ªß s·ªë m√°y bay y√™u c·∫ßu
        } else {
            // Ki·ªÉm tra xem c√≤n VietJet n√†o tr√™n m√†n h√¨nh kh√¥ng
            var hasVietjetOnScreen = false;
            for (var i = 0; i < gameState.planes.length; i++) {
                if (gameState.planes[i].type === 'player') {
                    hasVietjetOnScreen = true;
                    break;
                }
            }
            if (!hasVietjetOnScreen) {
                // Kh√¥ng c√≤n VietJet n√†o tr√™n m√†n m√† ch∆∞a ƒë·ªß s·ªë y√™u c·∫ßu ‚Üí Thua
                endGame(false);
            }
        }
    }
}

function endGame(isWin) {
    gameState.isGameRunning = false;

    if (gameState.animationFrame) {
        cancelAnimationFrame(gameState.animationFrame);
    }

    // D·ª´ng timer
    stopTimer();

    // D·ª´ng nh·∫°c n·ªÅn
    sounds.bgMusic.pause();
    sounds.bgMusic.currentTime = 0;
    
    setTimeout(function () {
        if (isWin) {
            // C·∫≠p nh·∫≠t QR code
            var qrImage = document.getElementById('qr-image');
            
            if (qrImage) {
                qrImage.src = CAMPAIGN_SETTINGS.qrCode;
            }
            
            showScreen('win-screen');
            playSoundSafe(sounds.winner);
        } else {
            // Hi·ªÉn th·ªã popup "THUA" tr∆∞·ªõc
            showGameOverPopup();
        }
    }, 500);
}

function spawnPlane() {
    if (!gameState.isGameRunning || isGamePaused) {
        return;
    }

    // Random ch·ªçn lo·∫°i ƒë·ªëi t∆∞·ª£ng
    var type;

    // N·∫øu ƒë√£ spawn ƒë·ªß 10 VietJet th√¨ ch·ªâ spawn horizontal/vertical
    if (gameState.vietjetSpawned >= gameState.maxVietjet) {
        // Ch·ªâ spawn horizontal ho·∫∑c vertical ƒë·ªÉ tƒÉng ƒë·ªô kh√≥
        type = Math.random() < 0.5 ? 'horizontal' : 'vertical';
    } else {
        // C√≤n VietJet th√¨ random nh∆∞ b√¨nh th∆∞·ªùng
        var rand = Math.random();
        if (rand < GAME_CONFIG.SPAWN_RATE.PLAYER) {
            type = 'player';
        } else if (rand < GAME_CONFIG.SPAWN_RATE.PLAYER + GAME_CONFIG.SPAWN_RATE.HORIZONTAL) {
            type = 'horizontal';
        } else {
            type = 'vertical';
        }
    }

    var x, y, vx, vy;

    // Random t·∫°o m√°y bay si√™u nhanh
    var isFastPlane = Math.random() < GAME_CONFIG.FAST_PLANE_CHANCE;
    var baseSpeed = isFastPlane
        ? GAME_CONFIG.SPEED_FAST + Math.random() * GAME_CONFIG.SPEED_FAST_RANGE
        : GAME_CONFIG.SPEED_DEFAULT + Math.random() * GAME_CONFIG.SPEED_RANGE;
    
    // √Åp d·ª•ng speed multiplier
    var speed = baseSpeed * CAMPAIGN_SETTINGS.speedMultiplier;

    // T√≠nh k√≠ch th∆∞·ªõc th·ª±c t·∫ø c·ªßa m√°y bay khi v·∫Ω (ƒë·ªÉ spawn ngo√†i m√†n h√¨nh)
    var planeDisplaySize = GAME_CONFIG.PLANE_SIZE * GAME_CONFIG.PLANE_SIZE_MULTIPLIER;
    var spawnOffset = planeDisplaySize / 2 + 10; // Offset th√™m 10px ƒë·ªÉ ch·∫Øc ch·∫Øn

    if (type === 'vertical') {
        // Vertical = Bay theo chi·ªÅu d·ªçc (t·ª´ tr√™n xu·ªëng ho·∫∑c d∆∞·ªõi l√™n)
        var fromTop = Math.random() < 0.5;
        // Gi·ªõi h·∫°n X: spawn t·ª´ 10% ƒë·∫øn 90% chi·ªÅu r·ªông (tr√°nh qu√° s√°t vi·ªÅn tr√°i/ph·∫£i)
        // D√πng VIRTUAL coordinates
        x = gameState.virtualWidth * 0.1 + Math.random() * (gameState.virtualWidth * 0.8);

        if (fromTop) {
            y = -spawnOffset; // Spawn ngo√†i bi√™n tr√™n
            vx = 0;
            vy = speed;
        } else {
            y = gameState.virtualHeight + spawnOffset; // Spawn ngo√†i bi√™n d∆∞·ªõi
            vx = 0;
            vy = -speed;
        }
    } else if (type === 'horizontal') {
        // Horizontal = Bay theo chi·ªÅu ngang (t·ª´ tr√°i qua ph·∫£i ho·∫∑c ng∆∞·ª£c l·∫°i)
        var fromLeft = Math.random() < 0.5;
        // Gi·ªõi h·∫°n Y: spawn t·ª´ 20% ƒë·∫øn 80% chi·ªÅu cao (tr√°nh qu√° s√°t vi·ªÅn tr√™n/d∆∞·ªõi)
        // D√πng VIRTUAL coordinates
        y = gameState.virtualHeight * 0.2 + Math.random() * (gameState.virtualHeight * 0.6);

        if (fromLeft) {
            x = -spawnOffset; // Spawn ngo√†i bi√™n tr√°i
            vx = speed;
            vy = 0;
        } else {
            x = gameState.virtualWidth + spawnOffset; // Spawn ngo√†i bi√™n ph·∫£i
            vx = -speed;
            vy = 0;
        }
    } else {
        // Player: bay t·ª´ 4 h∆∞·ªõng random
        var side = Math.floor(Math.random() * 4);

        switch (side) {
            case 0: // top
                // Gi·ªõi h·∫°n X: spawn t·ª´ 10% ƒë·∫øn 90% chi·ªÅu r·ªông (tr√°nh qu√° s√°t vi·ªÅn)
                // D√πng VIRTUAL coordinates
                x = gameState.virtualWidth * 0.1 + Math.random() * (gameState.virtualWidth * 0.8);
                y = -spawnOffset; // Spawn ngo√†i bi√™n tr√™n
                vx = (Math.random() - 0.5) * speed;
                vy = speed;
                break;
            case 1: // right
                x = gameState.virtualWidth + spawnOffset; // Spawn ngo√†i bi√™n ph·∫£i
                // Gi·ªõi h·∫°n Y: spawn t·ª´ 20% ƒë·∫øn 80% chi·ªÅu cao (tr√°nh qu√° s√°t vi·ªÅn)
                // D√πng VIRTUAL coordinates
                y = gameState.virtualHeight * 0.2 + Math.random() * (gameState.virtualHeight * 0.6);
                vx = -speed;
                vy = (Math.random() - 0.5) * speed;
                break;
            case 2: // bottom
                // Gi·ªõi h·∫°n X: spawn t·ª´ 10% ƒë·∫øn 90% chi·ªÅu r·ªông (tr√°nh qu√° s√°t vi·ªÅn)
                // D√πng VIRTUAL coordinates
                x = gameState.virtualWidth * 0.1 + Math.random() * (gameState.virtualWidth * 0.8);
                y = gameState.virtualHeight + spawnOffset; // Spawn ngo√†i bi√™n d∆∞·ªõi
                vx = (Math.random() - 0.5) * speed;
                vy = -speed;
                break;
            case 3: // left
                x = -spawnOffset; // Spawn ngo√†i bi√™n tr√°i
                // Gi·ªõi h·∫°n Y: spawn t·ª´ 20% ƒë·∫øn 80% chi·ªÅu cao (tr√°nh qu√° s√°t vi·ªÅn)
                // D√πng VIRTUAL coordinates
                y = gameState.virtualHeight * 0.2 + Math.random() * (gameState.virtualHeight * 0.6);
                vx = speed;
                vy = (Math.random() - 0.5) * speed;
                break;
        }
    }

    // Random ch·ªçn ·∫£nh t·ª´ category t∆∞∆°ng ·ª©ng
    var imageIndex = Math.floor(Math.random() * imageCategories[type].length);

    // T√≠nh rotation
    var rotation;
    if (type === 'vertical') {
        // Vertical: xoay theo h∆∞·ªõng d·ªçc
        if (vy > 0) {
            rotation = Math.PI / 2; // Bay xu·ªëng: 90¬∞ (ƒë·∫ßu h∆∞·ªõng xu·ªëng)
        } else {
            rotation = -Math.PI / 2; // Bay l√™n: -90¬∞ (ƒë·∫ßu h∆∞·ªõng l√™n)
        }
    } else {
        // Player v√† Horizontal: kh√¥ng xoay, ch·ªâ flip khi c·∫ßn
        rotation = 0;
    }

    // ƒê√°nh d·∫•u n·∫øu l√† VietJet th·ª© 10
    var isLastVietjet = (type === 'player' && gameState.vietjetSpawned === gameState.maxVietjet - 1);

    var plane = {
        x: x,
        y: y,
        vx: vx,
        vy: vy,
        size: GAME_CONFIG.PLANE_SIZE,
        rotation: rotation,
        type: type,
        imageIndex: imageIndex,
        isFast: isFastPlane,  // ƒê√°nh d·∫•u m√°y bay si√™u nhanh
        isLastVietjet: isLastVietjet,  // ƒê√°nh d·∫•u m√°y bay VietJet th·ª© 10
        // Th√™m thu·ªôc t√≠nh cho animation xoay nh·∫π c·ªßa player
        rotationOffset: 0,  // G√≥c xoay hi·ªán t·∫°i (dao ƒë·ªông)
        rotationSpeed: 0.02 + Math.random() * 0.02,  // T·ªëc ƒë·ªô xoay (√°p d·ª•ng b·ªô object)
        rotationTime: 0  // Bi·∫øn th·ªùi gian ƒë·ªÉ t√≠nh sin wave
    };

    gameState.planes.push(plane);
    gameState.planesSpawned++;

    // N·∫øu l√† VietJet th√¨ tƒÉng counter
    if (type === 'player') {
        gameState.vietjetSpawned++;
        updateScore(); // Update UI ngay
    }

    // Spawn next plane after delay (spawn li√™n t·ª•c cho ƒë·∫øn khi game k·∫øt th√∫c)
    setTimeout(spawnPlane, GAME_CONFIG.SPAWN_DELAY_MIN + Math.random() * GAME_CONFIG.SPAWN_DELAY_RANGE);
}

function gameLoop() {
    if (!gameState.isGameRunning) return;
    
    // V·∫´n v·∫Ω game khi pause, nh∆∞ng kh√¥ng c·∫≠p nh·∫≠t logic

    // Clear canvas - d√πng VIRTUAL dimensions
    gameState.ctx.clearRect(0, 0, gameState.virtualWidth, gameState.virtualHeight);

    // Draw map background - d√πng VIRTUAL dimensions
    if (gameState.mapBackground && gameState.mapBackground.complete) {
        gameState.ctx.save();

        // C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng ·∫£nh background
        gameState.ctx.imageSmoothingEnabled = true;
        // imageSmoothingQuality kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n Android 6, ki·ªÉm tra tr∆∞·ªõc khi d√πng
        if (gameState.ctx.imageSmoothingQuality) {
            gameState.ctx.imageSmoothingQuality = 'high';
        }

        gameState.ctx.drawImage(
            gameState.mapBackground,
            0, 0,
            gameState.virtualWidth,
            gameState.virtualHeight
        );
        gameState.ctx.restore();
    }

    // Draw clouds
    drawClouds();

    // Update and draw planes
    for (var i = gameState.planes.length - 1; i >= 0; i--) {
        var plane = gameState.planes[i];

        // Update position (ch·ªâ khi kh√¥ng pause)
        if (!isGamePaused) {
            plane.x += plane.vx;
            plane.y += plane.vy;
        }

        // Update rotation cho player planes (ch·ªâ khi kh√¥ng pause)
        if (!isGamePaused && (plane.type === 'player' || plane.type === 'horizontal' || plane.type === 'vertical')) {
            plane.rotationTime += plane.rotationSpeed;
            // Dao ƒë·ªông t·ª´ -0.15 ƒë·∫øn +0.15 radian (~-8¬∞ ƒë·∫øn +8¬∞)
            plane.rotationOffset = Math.sin(plane.rotationTime) * 0.15;
        }

        // Remove if out of bounds (ch·ªâ khi kh√¥ng pause)
        if (!isGamePaused) {
            var margin = 100; // Buffer ƒë·ªÉ planes bay ho√†n to√†n ra ngo√†i tr∆∞·ªõc khi x√≥a
            if (plane.x < -margin || plane.x > gameState.virtualWidth + margin ||
                plane.y < -margin || plane.y > gameState.virtualHeight + margin) {

                // N·∫øu l√† m√°y bay VietJet th·ª© 10 bay m·∫•t th√¨ thua ngay
                if (plane.isLastVietjet) {
                    gameState.planes.splice(i, 1);
                    endGame(false); // Thua do ƒë·ªÉ m√°y bay VietJet th·ª© 10 bay m·∫•t
                    return;
                }

                gameState.planes.splice(i, 1);

                // Ki·ªÉm tra ƒëi·ªÅu ki·ªán k·∫øt th√∫c sau khi x√≥a m√°y bay
                checkGameEnd();

                continue;
            }
        }

        // Draw plane
        drawPlane(plane);
    }

    gameState.animationFrame = requestAnimationFrame(gameLoop);
}

var clouds = [];

function drawClouds() {
    // Initialize clouds if empty - d√πng VIRTUAL dimensions
    if (clouds.length === 0) {
        for (var i = 0; i < 5; i++) {
            clouds.push({
                x: Math.random() * gameState.virtualWidth,
                y: Math.random() * gameState.virtualHeight,
                size: 80 + Math.random() * 100,
                speed: 0.2 + Math.random() * 0.3,
                imageIndex: Math.floor(Math.random() * 2), // Random ch·ªçn cloud.png ho·∫∑c cloud_2.png
                opacity: 0.5 + Math.random() * 0.3 // Random opacity t·ª´ 0.5 ƒë·∫øn 0.8
            });
        }
    }

    // Draw and update clouds v·ªõi ·∫£nh
    for (var i = 0; i < clouds.length; i++) {
        var cloud = clouds[i];
        // Ki·ªÉm tra xem ·∫£nh ƒë√£ load ch∆∞a
        if (imagesLoaded && loadedImages.cloud && loadedImages.cloud[cloud.imageIndex]) {
            gameState.ctx.save();

            // C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng ·∫£nh m√¢y
            gameState.ctx.imageSmoothingEnabled = true;
            if (gameState.ctx.imageSmoothingQuality) {
                gameState.ctx.imageSmoothingQuality = 'high';
            }

            gameState.ctx.globalAlpha = cloud.opacity;

            var img = loadedImages.cloud[cloud.imageIndex];
            var width = cloud.size;
            var height = cloud.size * 0.6; // T·ªâ l·ªá chi·ªÅu cao/r·ªông c·ªßa m√¢y

            gameState.ctx.drawImage(img, cloud.x, cloud.y, width, height);
            gameState.ctx.restore();
        }

        // Di chuy·ªÉn m√¢y
        cloud.x += cloud.speed;
        // Reset t·ª´ bi√™n tr√°i khi ra kh·ªèi bi√™n ph·∫£i - d√πng VIRTUAL dimensions
        if (cloud.x > gameState.virtualWidth) {
            cloud.x = 0; // Spawn t·ª´ bi√™n tr√°i
            cloud.y = Math.random() * gameState.virtualHeight;
        }
    }
}

function drawPlane(plane) {
    // Ch·ªâ v·∫Ω c√°c hi·ªáu ·ª©ng khi SHOW_HITBOX = true
    if (GAME_CONFIG.SHOW_HITBOX) {
        // V·∫Ω hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát cho m√°y bay VietJet th·ª© 10 (QUAN TR·ªåNG!)
        if (plane.isLastVietjet) {
            gameState.ctx.save();
            gameState.ctx.strokeStyle = '#FFD700'; // M√†u v√†ng kim
            gameState.ctx.lineWidth = 5;
            gameState.ctx.globalAlpha = 0.7 + Math.sin(Date.now() / 150) * 0.3; // Nh·∫•p nh√°y nhanh
            gameState.ctx.beginPath();
            gameState.ctx.arc(plane.x, plane.y, plane.size / 2 + 10, 0, Math.PI * 2);
            gameState.ctx.stroke();

            // V·∫Ω v√≤ng th·ª© 2 ƒë·ªÉ n·ªïi b·∫≠t h∆°n
            gameState.ctx.strokeStyle = '#FFA500';
            gameState.ctx.lineWidth = 3;
            gameState.ctx.beginPath();
            gameState.ctx.arc(plane.x, plane.y, plane.size / 2 + 15, 0, Math.PI * 2);
            gameState.ctx.stroke();
            gameState.ctx.restore();
        }
        // M√°y bay si√™u nhanh kh√¥ng c√≥ hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát - ch·ªâ d√πng hitbox b√¨nh th∆∞·ªùng
    }

    // V·∫Ω v√≤ng tr√≤n debug ƒë·ªÉ th·∫•y ph·∫°m vi click (ch·ªâ khi SHOW_HITBOX = true)
    if (GAME_CONFIG.SHOW_HITBOX) {
        gameState.ctx.save();
        gameState.ctx.strokeStyle = plane.type === 'player' ? '#00FF00' : '#FF0000';
        gameState.ctx.lineWidth = 2;
        gameState.ctx.beginPath();
        var debugRadius = (plane.size / 2) * GAME_CONFIG.HITBOX_MULTIPLIER;
        gameState.ctx.arc(plane.x, plane.y, debugRadius, 0, Math.PI * 2);
        gameState.ctx.stroke();
        gameState.ctx.restore();
    }

    // Ki·ªÉm tra xem ·∫£nh ƒë√£ load ch∆∞a
    if (!imagesLoaded || !loadedImages[plane.type] || !loadedImages[plane.type][plane.imageIndex]) {
        // V·∫Ω h√¨nh m·∫∑c ƒë·ªãnh n·∫øu ·∫£nh ch∆∞a load
        gameState.ctx.save();
        gameState.ctx.translate(plane.x, plane.y);
        gameState.ctx.rotate(plane.rotation);

        gameState.ctx.fillStyle = '#E20074';
        gameState.ctx.beginPath();
        gameState.ctx.ellipse(0, 0, plane.size * 0.5, plane.size * 0.2, 0, 0, Math.PI * 2);
        gameState.ctx.fill();

        gameState.ctx.restore();
        return;
    }

    // V·∫Ω ·∫£nh m√°y bay
    gameState.ctx.save();

    // C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng ·∫£nh khi scale
    gameState.ctx.imageSmoothingEnabled = true;
    if (gameState.ctx.imageSmoothingQuality) {
        gameState.ctx.imageSmoothingQuality = 'high';
    }
    gameState.ctx.translate(plane.x, plane.y);

    // X·ª≠ l√Ω rotation v√† flip
    switch (plane.type) {
        case 'vertical':
            gameState.ctx.rotate(plane.rotationOffset); break;

        case 'horizontal':
            gameState.ctx.rotate(plane.rotationOffset);
            if (plane.vx < 0) {
                gameState.ctx.scale(-1, 1); // Flip ngang
            }
            break;

        case 'player':
            // Player: √Åp d·ª•ng rotation nh·∫π ƒë·ªÉ t·∫°o c·∫£m gi√°c bay
            gameState.ctx.rotate(plane.rotationOffset);

            // Ch·ªâ flip ngang khi bay t·ª´ ph·∫£i sang tr√°i
            if (plane.vx < 0) {
                gameState.ctx.scale(-1, 1); // Flip ngang
            }
            break;

        default:
            break;
    }

    var img = loadedImages[plane.type][plane.imageIndex];
    var width = plane.size * GAME_CONFIG.PLANE_SIZE_MULTIPLIER;
    var height = plane.size * GAME_CONFIG.PLANE_SIZE_MULTIPLIER;

    gameState.ctx.drawImage(img, -width / 2, -height / 2, width, height);

    gameState.ctx.restore();
}

// Rating system
var selectedRating = 0;

function rateStar(value) {
    selectedRating = value;
    
    // Ph√°t √¢m thanh rating
    playSoundSafe(sounds.rating);
    
    var stars = document.querySelectorAll('.star');

    // Chrome 44: D√πng for loop thay v√¨ forEach
    for (var i = 0; i < stars.length; i++) {
        if (i < value) {
            stars[i].classList.add('active');
            stars[i].textContent = '‚òÖ';
        } else {
            stars[i].classList.remove('active');
            stars[i].textContent = '‚òÜ';
        }
    }

    // Emoji t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng m·ª©c ƒë√°nh gi√°
    var emojiMap = {
        1: 'üò¢',  // R·∫•t t·ªá
        2: 'üôÅ',  // Kh√¥ng h√†i l√≤ng
        3: 'üòê',  // B√¨nh th∆∞·ªùng
        4: 'üòä',  // T·ªët
        5: 'üòç'   // Tuy·ªát v·ªùi
    };

    document.getElementById('rating-emoji').textContent = emojiMap[value];
    document.getElementById('rating-value').textContent = '';

    // Kh√¥ng t·ª± ƒë·ªông chuy·ªÉn m√†n h√¨nh n·ªØa - ch·ªâ khi b·∫•m n√∫t g·ª≠i
}

function showRating() {
    showScreen('rating-screen');
    selectedRating = 0;
    // Reset emoji v·ªÅ m·∫∑c ƒë·ªãnh
    document.getElementById('rating-emoji').textContent = 'ü§î';
    document.getElementById('rating-value').textContent = '';
    var stars = document.querySelectorAll('.star');
    
    // Chrome 44: D√πng for loop thay v√¨ forEach
    for (var i = 0; i < stars.length; i++) {
        stars[i].classList.remove('active');
        stars[i].textContent = '‚òÜ';
    }
    
    document.getElementById('rating-value').textContent = '';
    
    // Reset feedback input
    var feedbackInput = document.getElementById('feedback-input');
    if (feedbackInput) {
        feedbackInput.value = '';
    }
}

// H√†m l∆∞u feedback v√† rating v√†o localStorage
function saveFeedbackData() {
    var feedbackInput = document.getElementById('feedback-input');
    var feedbackText = feedbackInput ? feedbackInput.value.trim() : '';
    
    var feedbackData = {
        rating: selectedRating,
        feedback: feedbackText,
        timestamp: new Date().toISOString(),
        gameData: {
            caughtPlanes: gameState.caughtPlanes,
            totalSpawned: gameState.planesSpawned,
            vietjetSpawned: gameState.vietjetSpawned
        }
    };
    
    try {
        // L·∫•y d·ªØ li·ªáu c≈© t·ª´ localStorage
        var existingData = localStorage.getItem('vj_feedback_data');
        var feedbackHistory = existingData ? JSON.parse(existingData) : [];
        
        // Th√™m d·ªØ li·ªáu m·ªõi
        feedbackHistory.push(feedbackData);
        
        // L∆∞u l·∫°i v√†o localStorage (gi·ªõi h·∫°n 50 feedback g·∫ßn nh·∫•t)
        if (feedbackHistory.length > 50) {
            feedbackHistory = feedbackHistory.slice(-50);
        }
        
        localStorage.setItem('vj_feedback_data', JSON.stringify(feedbackHistory));
        console.log('Feedback saved:', feedbackData);
    } catch (e) {
        console.error('Error saving feedback:', e);
    }
}

// H√†m x·ª≠ l√Ω khi b·∫•m n√∫t g·ª≠i feedback
function handleSendFeedback() {
    if (selectedRating === 0) {
        // Hi·ªÉn th·ªã th√¥ng b√°o y√™u c·∫ßu ch·ªçn rating
        var ratingValue = document.getElementById('rating-value');
        if (ratingValue) {
            ratingValue.textContent = 'Vui l√≤ng ch·ªçn s·ªë sao ƒë√°nh gi√°!';
            ratingValue.style.color = '#e74c3c';
        }
        return;
    }
    
    // L∆∞u d·ªØ li·ªáu feedback
    saveFeedbackData();
    
    // Ph√°t √¢m thanh
    playSoundSafe(sounds.tap);
    
    // Chuy·ªÉn sang m√†n h√¨nh c·∫£m ∆°n
    showThankYou();
}

function showThankYou() {
    showScreen('thank-screen');
}

function restartGame() {
    // D·ª´ng timer
    stopTimer();

    // Clear game over timeout n·∫øu c√≥
    if (gameOverTimeout) {
        clearTimeout(gameOverTimeout);
        gameOverTimeout = null;
    }

    // D·ª´ng t·∫•t c·∫£ √¢m thanh
    sounds.bgMusic.pause();
    sounds.bgMusic.currentTime = 0;
    sounds.winner.pause();
    sounds.gameOver.pause();

    // Reset survey
    var radios = document.querySelectorAll('input[type="radio"]');
    
    // Chrome 44: D√πng for loop thay v√¨ forEach
    for (var i = 0; i < radios.length; i++) {
        radios[i].checked = false;
    }

    // Reset clouds
    clouds = [];

    // Clear canvas ngay l·∫≠p t·ª©c ƒë·ªÉ x√≥a h·∫øt planes ƒëang bay
    if (gameState.ctx) {
        gameState.ctx.clearRect(0, 0, gameState.virtualWidth, gameState.virtualHeight);
    }

    // Clear planes array ƒë·ªÉ x√≥a h·∫øt planes ƒëang bay
    gameState.planes = [];

    // Reset game state ho√†n to√†n
    gameState.caughtPlanes = 0;
    gameState.planesSpawned = 0;
    gameState.vietjetSpawned = 0;
    gameState.chances = CAMPAIGN_SETTINGS.maxChances;
    gameState.timeLeft = CAMPAIGN_SETTINGS.gameTime;
    gameState.isGameRunning = false;

    // S·ª≠ d·ª•ng map hi·ªán t·∫°i ƒë·ªÉ ch∆°i l·∫°i (kh√¥ng random map m·ªõi)
    if (currentMap) {
        console.log('Restarting with same map:', currentMap);
        selectMap(currentMap);
    } else {
        // Fallback n·∫øu kh√¥ng c√≥ map ƒë∆∞·ª£c l∆∞u (tr∆∞·ªùng h·ª£p hi·∫øm)
        console.log('No saved map, going to welcome screen');
        showScreen('welcome-screen');
        // Ph√°t l·∫°i nh·∫°c menu theme n·∫øu kh√¥ng mute nh·∫°c
        playSoundSafe(sounds.menuTheme);
    }
}

// Pause feature removed

// Pause functionality
var isGamePaused = false;

// Current map storage
var currentMap = null;

function showPausePopup() {
    var popup = document.getElementById('pause-popup');
    if (popup) {
        popup.classList.add('active');
        pauseGame();
    }
}

function hidePausePopup() {
    var popup = document.getElementById('pause-popup');
    if (popup) {
        popup.classList.remove('active');
        resumeGame();
    }
}

function pauseGame() {
    isGamePaused = true;
    
    // D·ª´ng timer
    stopTimer();
    
    // D·ª´ng t·∫•t c·∫£ √¢m thanh
    Object.keys(sounds).forEach(function(key) {
        if (sounds[key] && typeof sounds[key].pause === 'function') {
            sounds[key].pause();
        }
    });
    
    // D·ª´ng spawn planes nh∆∞ng v·∫´n gi·ªØ game loop ch·∫°y ƒë·ªÉ v·∫Ω game
    // gameState.isGameRunning v·∫´n true ƒë·ªÉ game loop ti·∫øp t·ª•c
    
    console.log('Game paused');
}

function resumeGame() {
    isGamePaused = false;
    
    // Ti·∫øp t·ª•c game n·∫øu ƒëang trong game
    var gameScreen = document.getElementById('game-screen');
    if (gameScreen && gameScreen.classList.contains('active')) {
        gameState.isGameRunning = true;
        startTimer();
        
        // Ph√°t l·∫°i nh·∫°c n·ªÅn game n·∫øu kh√¥ng mute
        if (!audioSettings.isMusicMuted) {
            playSoundSafe(sounds.bgMusic);
        }
    }
    
    console.log('Game resumed');
}

function setupPausePopupButtons() {
    // Sound buttons trong pause popup
    var pauseSoundBtns = document.querySelectorAll('#pause-popup .sound-btn');
    if (pauseSoundBtns && pauseSoundBtns.length) {
        for (var i = 0; i < pauseSoundBtns.length; i++) {
            (function(btn){
                addClickLikeHandler(btn, function(e) {
                    e.stopPropagation();
                    playSoundSafe(sounds.tap);
                    setSfxMuted(!audioSettings.isSfxMuted);
                });
            })(pauseSoundBtns[i]);
        }
    }
    
    // Music buttons trong pause popup
    var pauseMusicBtns = document.querySelectorAll('#pause-popup .music-btn');
    if (pauseMusicBtns && pauseMusicBtns.length) {
        for (var j = 0; j < pauseMusicBtns.length; j++) {
            (function(btn){
                addClickLikeHandler(btn, function(e) {
                    e.stopPropagation();
                    playSoundSafe(sounds.tap);
                    var willMute = !audioSettings.isMusicMuted;
                    setMusicMuted(willMute);
                });
            })(pauseMusicBtns[j]);
        }
    }
}

// Game Over Popup
var gameOverTimeout = null;

function showGameOverPopup() {
    var popup = document.getElementById('game-over-popup');
    var popupScore = document.getElementById('popup-score');
    
    // C·∫≠p nh·∫≠t s·ªë m√°y bay b·∫Øt ƒë∆∞·ª£c
    popupScore.textContent = gameState.caughtPlanes;
    
    // Ph√°t √¢m thanh game over
    playSoundSafe(sounds.gameOver);
    
    // Hi·ªÉn th·ªã popup
    popup.classList.add('show');
    
    // Function ƒë·ªÉ chuy·ªÉn m√†n
    function goToLoseScreen() {
        if (gameOverTimeout) {
            clearTimeout(gameOverTimeout);
            gameOverTimeout = null;
        }
        
        popup.classList.remove('show');
        
        // ƒê·ª£i fade out xong r·ªìi chuy·ªÉn m√†n
        setTimeout(function() {
            showScreen('lose-screen');
        }, 300);
        
        // Remove event listeners
        popup.removeEventListener('click', goToLoseScreen);
        popup.removeEventListener('touchstart', goToLoseScreen);
    }
    
    // Th√™m event listener cho click/touch ƒë·ªÉ skip
    popup.addEventListener('click', goToLoseScreen);
    popup.addEventListener('touchstart', goToLoseScreen);
    
    // Sau 3 gi√¢y, t·ª± ƒë·ªông chuy·ªÉn m√†n
    gameOverTimeout = setTimeout(goToLoseScreen, 5000);
}

// Universal click handler cho touch/mouse/pointer (h·ªó tr·ª£ t·∫•t c·∫£ thi·∫øt b·ªã)
// ƒê∆°n gi·∫£n h√≥a cho Android 6 / Chrome 44
function addClickLikeHandler(el, handler) {
    if (!el) return;
    
    var handled = false;
    
    el.addEventListener('touchend', function(e) {
        e.preventDefault();
        if (!handled) {
            handled = true;
            handler(e);
            setTimeout(function() { handled = false; }, 500);
        }
    }, false);
    
    // LU√îN th√™m click event (quan tr·ªçng cho t·∫•t c·∫£ thi·∫øt b·ªã)
    el.addEventListener('click', function(e) {
        if (!handled) {
            handled = true;
            handler(e);
            setTimeout(function() { handled = false; }, 500);
        }
    }, false);
}

// Audio unlock handler
var audioUnlocked = false;
function unlockAudio() {
    //Check devicePixelRatio || tuy·∫øt ƒë·ªëi kh√¥ng xo√° nh√©
    // alert('devicePixelRatio: ' + window.devicePixelRatio);
    console.log('devicePixelRatio: ', window.devicePixelRatio);
    
    // G·ªçi API GET t·ªõi https://jsonplaceholder.typicode.com/todos/1 
    callAPI({
        method: 'GET',
        url: 'https://jsonplaceholder.typicode.com/todos/1',
        onSuccess: function(response) {
            console.log('K·∫øt qu·∫£ GET:', response);
        },
        onError: function(error) {
            console.log('L·ªói API:', error);
        }
    });
    
    // Tr√°nh g·ªçi nhi·ªÅu l·∫ßn
    if (audioUnlocked) {
        return;
    }
    
    audioUnlocked = true;
    
    // Ph√°t nh·∫°c menu theme
    playSoundSafe(sounds.menuTheme);
    
    // ·∫®n overlay - QUAN TR·ªåNG: X√ìA HO√ÄN TO√ÄN kh·ªèi DOM
    var audioUnlock = document.getElementById('audio-unlock');
    if (audioUnlock) {
        // X√≥a kh·ªèi DOM (c√°ch an to√†n nh·∫•t)
        if (audioUnlock.parentNode) {
            audioUnlock.parentNode.removeChild(audioUnlock);
        }
    }
}

// Setup ALL event handlers (T·∫§T C·∫¢ handlers ƒë∆∞·ª£c setup ·ªü ƒë√¢y)
function setupAllEventHandlers() {
    // 1. Setup Audio Unlock Overlay
    var audioUnlock = document.getElementById('audio-unlock');
    if (audioUnlock) {
        addClickLikeHandler(audioUnlock, unlockAudio);
    }
    
    // 2. Setup Splash Button (TAP TO START)
    var splashButton = document.querySelector('.splash-button');
    if (splashButton) {
        addClickLikeHandler(splashButton, function(e) {
            playSoundSafe(sounds.tap);
            showSurvey();
        });
    }
    
    // 3. Setup Survey Continue Button (g·ªôp chung)
    var surveyContinueBtn = document.getElementById('survey-continue-btn');
    if (surveyContinueBtn) {
        addClickLikeHandler(surveyContinueBtn, function(e) {
            playSoundSafe(sounds.tap);
            nextQuestion();
        });
    }
    
    // 4. Setup Help Button
    var helpButton = document.getElementById('help-button');
    if (helpButton) {
        addClickLikeHandler(helpButton, function(e) {
            playSoundSafe(sounds.tap);
            showRulesModal();
        });
    }
    
    // 5. Setup Start Game Button
    var startGameBtn = document.getElementById('start-game-btn');
    if (startGameBtn) {
        addClickLikeHandler(startGameBtn, function(e) {
            playSoundSafe(sounds.tap);
            // Random map nh∆∞ng kh√¥ng hi·ªán gacha animation
            var randomIndex = Math.floor(Math.random() * MAPS_CONFIG.length);
            var randomMapId = MAPS_CONFIG[randomIndex].id;
            
            // L∆∞u map hi·ªán t·∫°i ƒë·ªÉ d√πng khi restart
            currentMap = randomMapId;
            
            selectMap(randomMapId);
        });
    }
    
    // 6. Setup Settings Toggle Button
    var settingsToggle = document.getElementById('settings-toggle');
    if (settingsToggle) {
        addClickLikeHandler(settingsToggle, function(e) {
            playSoundSafe(sounds.tap);
            showSettingsPopup();
        });
    }
    
    // 7. Setup Settings Popup Events
    setupSettingsPopupEvents();
    
    // 6. Setup Win Continue Button
    var winContinueBtn = document.getElementById('win-continue-btn');
    if (winContinueBtn) {
        addClickLikeHandler(winContinueBtn, function(e) {
            playSoundSafe(sounds.tap);
            showRating();
        });
    }
    
    // 8. Setup Lose Continue Button
    var loseContinueBtn = document.getElementById('lose-continue-btn');
    if (loseContinueBtn) {
        addClickLikeHandler(loseContinueBtn, function(e) {
            playSoundSafe(sounds.tap);
            showRating();
        });
    }
    
    // 9. Setup Restart Button
    var restartBtn = document.getElementById('restart-btn');
    if (restartBtn) {
        addClickLikeHandler(restartBtn, function(e) {
            playSoundSafe(sounds.tap);
            restartGame();
        });
    }
    
    // 10. Setup Modal Close Button
    var modalCloseBtn = document.getElementById('modal-close-btn');
    if (modalCloseBtn) {
        addClickLikeHandler(modalCloseBtn, closeRulesModal);
    }
    
    // 11. Setup Modal Overlay
    var modalOverlay = document.getElementById('modal-overlay');
    if (modalOverlay) {
        addClickLikeHandler(modalOverlay, closeRulesModal);
    }
    
    // 12. Setup Modal OK Button
    var modalOkBtn = document.getElementById('modal-ok-btn');
    if (modalOkBtn) {
        addClickLikeHandler(modalOkBtn, function(e) {
            playSoundSafe(sounds.tap);
            closeRulesModal();
        });
    }
    
    // NOTE: ƒê√£ x√≥a setup cho map carousel (kh√¥ng d√πng n·ªØa - thay b·∫±ng gacha)
    // Gacha animation t·ª± ƒë·ªông ch·∫°y khi g·ªçi showGachaAnimation()
    
    // Setup pause popup buttons
    setupPausePopupButtons();
    
    // Setup rating stars
    var stars = document.querySelectorAll('.star');
    
    // Chrome 44: D√πng for loop thay v√¨ forEach
    if (stars.length > 0) {
        for (var i = 0; i < stars.length; i++) {
            (function(star, index) {
                var value = parseInt(star.getAttribute('data-value'));
                addClickLikeHandler(star, function(e) {
                    playSoundSafe(sounds.tap);
                    rateStar(value);
                });
            })(stars[i], i);
        }
    }
    
    // Setup specific buttons v·ªõi ID
    var buttonHandlers = {
        'help-button': showRulesModal,
        // 'start-game-btn': ƒë√£ setup ri√™ng ·ªü tr√™n - kh√¥ng d√πng gacha n·ªØa
        'win-continue-btn': showRating,
        'lose-continue-btn': showRating,
        'restart-btn': restartGame,
        'modal-close-btn': closeRulesModal,
        'modal-ok-btn': closeRulesModal,
        'send-feedback-btn': handleSendFeedback,
        'rating-close-btn': function() {
            playSoundSafe(sounds.tap);
            showWelcome();
        },
        'btn-pause': function() {
            playSoundSafe(sounds.tap);
            showPausePopup();
        },
        'pause-close': function() {
            playSoundSafe(sounds.tap);
            hidePausePopup();
        },
        'pause-resume-btn': function() {
            playSoundSafe(sounds.tap);
            hidePausePopup();
        },
        'pause-home-btn': function() {
            playSoundSafe(sounds.tap);
            hidePausePopup();
            showWelcome();
        },
        'pause-restart-btn': function() {
            playSoundSafe(sounds.tap);
            hidePausePopup();
            restartGame();
        },
        'lose-close-btn': function() {
            playSoundSafe(sounds.tap);
            showWelcome();
        },
        'lose-restart-btn': function() {
            playSoundSafe(sounds.tap);
            restartGame();
        },
        'lose-continue-btn': function() {
            playSoundSafe(sounds.tap);
            showWelcome();
        }
    };
    
    Object.keys(buttonHandlers).forEach(function(btnId) {
        var btn = document.getElementById(btnId);
        if (btn) {
            addClickLikeHandler(btn, function(e) {
                playSoundSafe(sounds.tap);
                buttonHandlers[btnId]();
            });
        }
    });
    
    // C·∫≠p nh·∫≠t UI √¢m thanh/nh·∫°c l√∫c kh·ªüi t·∫°o
    updateAudioButtonsUI();

    // Setup modal overlay
    var modalOverlay = document.getElementById('modal-overlay');
    if (modalOverlay) {
        addClickLikeHandler(modalOverlay, function(e) {
            closeRulesModal();
        });
    }
}

// Initialize game when page loads
window.addEventListener('load', function () {
    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë√£ render ho√†n to√†n (quan tr·ªçng cho Android c≈©)
    setTimeout(function() {
        preloadImages();
        showScreen('welcome-screen');
        setupAllEventHandlers();
    }, 100);
});
